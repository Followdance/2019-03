给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。
k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。
示例 :
给定这个链表：1->2->3->4->5
当 k = 2 时，应当返回: 2->1->4->3->5
当 k = 3 时，应当返回: 3->2->1->4->5
说明 :
你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
代码：
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target) 
{
    struct ListNode* swapPairs(struct ListNode* head) 
    {
        if(head == NULL || head->next == NULL)
            return head;
        struct ListNode *p1,*p2,*pre,*t;
        p1 = head;
        p2 = head->next;
        t = p2->next;
        p1->next = p2->next;
        p2->next = p1;
        pre = p1;
        head = p2;
        while(p1 != NULL && p2 != NULL && t != NULL && t->next != NULL)
        {
            p1 = t;
            p2 = t->next;
            t = p2->next;
            pre->next = p2;
            p1->next = p2->next;
            p2->next = p1;
            pre = p1;
        }
        return head;
    }
}
